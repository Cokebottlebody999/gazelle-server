working_directory: &working_directory
  working_directory: ~/gazelle-server

docker_no_database: &docker_no_database
  docker:
    - image: thegazelle/gazelle-main-circleci-primary:0.0.6

docker_with_database: &docker_with_database
  docker:
    - image: thegazelle/gazelle-main-circleci-primary:0.0.6
    - image: circleci/mariadb:10.1
      environment:
        MYSQL_ROOT_PASSWORD: circleci_test_gazelle
        MYSQL_DATABASE: the_gazelle

defaults: &defaults
  <<: *working_directory
  <<: *docker_no_database

defaults_with_database: &defaults_with_database
  <<: *working_directory
  <<: *docker_with_database

version: 2
jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout

      # Complete setup
      - run: |
          sed 's/^DATABASE_PASSWORD=.*/DATABASE_PASSWORD=circleci_test_gazelle/' .sample-env > .env

      - persist_to_workspace:
          root: .
          paths:
            - '**/*'


  install_dependencies:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/.ssh
      - attach_workspace:
          at: .

      - run:
          name: Install dependencies in ci mode that is faster and ensures the lockfile is correct
          command: npm ci

      - persist_to_workspace:
          root: .
          paths:
            - '**/*'

  unit_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Make sure coverage folder exists
          command: mkdir -p ~/coverage

      - run:
          name: Run unit tests and save coverage
          command: npm run test:unit -- --coverage > coverage/unit

      - persist_to_workspace:
          root: .
          paths:
            - '**/*'

  integration_test:
    <<: *defaults_with_database
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Make sure coverage folder exists
          command: mkdir -p ~/coverage

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run:
          name: Run integration tests and save coverage
          command: npm run test:it -- --coverage > coverage/it

      - persist_to_workspace:
          root: .
          paths:
            - '**/*'

  send_coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .

      - run:
          name: setup dependencies for code coverage
          command: sudo npm i -g coveralls

      - run:
          name: Send coverage to Coveralls
          command: echo "$(cat coverage/unit)$(cat coverage/it)" | coveralls

  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Run ESLint
          command: npm run lint:js

      - run:
          name: Run Typescript to check types
          command: npm run lint:ts

      - run:
          name: Run our opinionated code formatter prettier
          command: npm run lint:prettier

  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .

      - run: npm run build:production

      - persist_to_workspace:
          root: .
          paths:
            - '**/*'

  end_to_end_tests:
    <<: *defaults_with_database
    steps:
      - attach_workspace:
          at: .
      - attach_workspace:
          at: ~/.ssh

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run: ./.circleci/scripts/load-test-database.sh

      # Actually run the tests
      - run: ./.circleci/scripts/run-end-to-end-tests.sh

  prep_ssh:
    <<: *defaults
    steps:
      # Setup known_hosts so the VM allows ssh access without the prompt
      - run:
          name: Add server ssh keys to known_hosts
          command: mkdir -p ~/.ssh && ssh-keyscan -t rsa "$GAZELLE_SERVER_STAGING_IP" "$GAZELLE_SERVER_PRODUCTION_IP" >> ~/.ssh/known_hosts

      - run:
          name: Add Github RSA key to known_hosts
          command: ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

      - persist_to_workspace:
          root: ~/.ssh
          paths:
            - known_hosts

  deploy_staging:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/.ssh

      - run:
          name: Deploy to staging
          command: ssh "$GAZELLE_SERVER_STAGING_USER@$GAZELLE_SERVER_STAGING_IP" 'bash -ic "deployment-resources/scripts/update-source.sh"'

  deploy_production:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/.ssh

      - run:
          name: Deploy to production
          command: ssh "$GAZELLE_SERVER_PRODUCTION_USER@$GAZELLE_SERVER_PRODUCTION_IP" 'bash -ic "deployment-resources/scripts/update-source.sh"'

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - checkout_code

      - prep_ssh

      - install_dependencies:
          requires:
            - checkout_code
            - prep_ssh

      - unit_test:
          requires:
            - install_dependencies
      - integration_test:
          requires:
            - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - build:
          requires:
            - install_dependencies

      - send_coverage:
          requires:
            - unit_test
            - integration_test

      - end_to_end_tests:
          requires:
            - build
            - prep_ssh

      # Deployment related
      - deploy_staging:
          requires:
            - unit_test
            - lint
            - end_to_end_tests
            - prep_ssh
          filters:
            branches:
              only: master
      - deploy_production:
          requires:
            - unit_test
            - lint
            - end_to_end_tests
            - prep_ssh
          filters:
            branches:
              only: stable
